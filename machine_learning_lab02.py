# -*- coding: utf-8 -*-
"""Machine Learning_Lab02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aIodkKB1lApYI3wu5VkRQ1r2CeyWc_11

**Object Oriented Approach**
"""

class dog:
  def __init__(self, colour, breed, age):
    self.colour = colour
    self.breed  = breed
    self.age    = age
  def printNameA(self):
    print( "\n", self.colour, "\n",self.breed, "\n", self.age, "\n")
  def printNameB(self):
    print( "\n", self.colour, "\n",self.breed, "\n", self.age, "\n", self.height, "\n", self.price)

class GermanShephered(dog):
  def __init__(self, colour, breed, age, height, price):
    super().__init__(colour, breed, age)
    self.height = height
    self.price  = price
a = dog( "Black", "Rottweiler", "1.5 years") 
b = GermanShephered("White", "Siberian Husky", "1 year", "2'9", "USD $3000")

a.printNameA()
b.printNameB()

"""**Enumerate**"""

list = ["Rottweiler", "German Shephered", "Siberian Husky"]
for i in enumerate(list):
  print(i)

"""**o Given a list of strings, return the count of the number of strings
where the string length is 2 or more and the first and last chars of the
string are the same.**
"""

list = ['Adnan Yousaf', 'a', 'maim', 'Noman Yousaf','r', 'Ahmed', 'Faizan', '1', 'Hassan Yousaf', '6', '/', 'Yousaf Ali']
for i in range(len(list)):
  if len(list[i]) == 2 or len(list[i]) >=2 and list[i][0] == list[i][-1]:
    print(list[i])

"""**o Given a list of strings, return a list with the strings in sorted order,
except group all the strings that begin with &#39;x&#39; first.**
"""

list = ['Adnan Yousaf', 'a', 'maim', 'xMan', 'xWolvarine', 'Noman Yousaf','r', 'Ahmed', 'Faizan', '1', 'Hassan Yousaf', '6', '/', 'g','Yousaf Ali']

new_list =[]
for i in range(len(list)):
  if list[i][0] != 'x':
    new_list.append(list[i])
print(new_list)
list == new_list



"""**o Given a list of non-empty tuples, return a list sorted in increasing
order by the last element in each tuple.**
"""

new_list1=[]
new_list2=[]
size =len(list)
list = ['Adnan Yousaf', 'a', 'maim', 'Noman Yousaf','r', 'Ahmed', 'Faizan', '1', 'Hassan Yousaf', '6', '/', 'g','Yousaf Ali']
for i in range(len(list)):
  reversed_indices =len(list)-1-i
  reverse_elements = list[(size-i)-1]
  
  # Appending
  new_list1.append(reversed_indices)
  new_list2.append(reverse_elements)
print("Reversed indices: ", new_list1, "\nReversed elements: ", new_list2)

"""**o Given a list of numbers, return a list where all adjacent == elements
have been reduced to a single element, so [1, 2, 2, 3] returns [1, 2, 3].**
"""

sorted_list = []
temp = []
without_duplicates = []
list = [2,3,4,1,6,5,2,5,7,8,7,9]
sorted_list = sorted(list)

for i in sorted_list:
  if i not in without_duplicates:
    without_duplicates.append(i)
del list

# for i in range(len(list)-1):
#   if list[i] != list[i+1]:
#     temp.append(list[i+1])
#     list = sorted(list)

print(without_duplicates,
list)

"""**o two lists sorted in increasing order, create and return a merged list of
all the elements in sorted order**
"""

list1 = [1,3,5,7,20,2,4,6,11,15,9]
list2 = [11,13,12,3,1,5,15,5,18,19,20,41]
list1 = sorted(list1)
list2 = sorted(list2)

merged_lists = []
merged_lists = list1 + list2

new_list = []
for i in merged_lists:
  if i not in new_list:
    new_list.append(i)

print("Merged List: ",merged_lists,"\nWithout duplicates list: ", new_list)

"""**ï‚· For the given csv implement the tasks:**"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
df= pd.read_csv(r'/content/drinks.csv')



"""*Rows of dataframe**"""

len(df)

"""**Drop NA values**"""

df.dropna(inplace=True)

df

"""**o A function that takes name of the coloumn and outputs the data in
the column**
"""

def column_data(column_name):
  print(df[column_name])

input1 = input("Enter name of the column: ")

column_data(input1)

"""**Histogram**"""

import pandas as pd
df= pd.read_csv(r'/content/drinks.csv')

df['beer_servings'].plot.hist()

df.drop('country', axis =1, inplace=True)
df.drop('continent', axis =1, inplace= True)

df



"""**More than 2 columns**"""

df.plot.hist()



"""**Scatter Chart**

**3D scatter plot**

**Two columns**
"""

import pandas as pd
df= pd.read_csv(r'/content/drinks.csv')

from mpl_toolkits import mplot3d
import numpy as np
import matplotlib.pyplot as plt
 
a = df['beer_servings']
b = df['spirit_servings']

 
#Create fig
figure =plt.figure(figsize = (15, 10))
x =plt.axes(projection= "3d")
#create plot
x.scatter3D(b, a, color ="red")
plt.title("3D scatter plot")
 
plt.show()

"""**Scatter plot of Whole dataframe**"""

from mpl_toolkits import mplot3d
import numpy as np
import matplotlib.pyplot as plt
 
c= df['beer_servings']
a= df['spirit_servings']
b= df['wine_servings']
 
figure= plt.figure(figsize = (15, 10))
x= plt.axes(projection="3d")
 
x.scatter3D(a, b, c, color="green")
plt.title("3D scatter plot")
 
plt.show()



"""**2D scatter plot**"""

a=pd.DataFrame(df['beer_servings'] , df['spirit_servings'])

a

df.plot.scatter(x = 'beer_servings', y = 'wine_servings', s = 200, c = 'red');



"""**Pie Chart**"""

df.drop('country', axis =1, inplace=True)
df.drop('continent', axis =1, inplace= True)
df.drop('beer_servings', axis =1, inplace=True)
df.drop('spirit_servings', axis =1, inplace= True)

plot = df.plot.pie(subplots=True, figsize=(20, 20))

import pandas as pd
df= pd.read_csv(r'/content/drinks.csv')

plot = df.plot.pie(y ='beer_servings', figsize=(10, 10))

"""**Bar plot**

**Foe single column**
"""

df['wine_servings'].plot.bar()

"""**Whole dataframe**"""

df.plot.bar()

